swagger: "2.0"
info:
  title: Shop API
  description: documents for Shop API
  version: 1.0.0
basePath: /v1
paths:
  /category/:
    get:
      tags:
      - category
      description: get Category
      operationId: CategoryController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Category'
        "403":
          description: ""
    post:
      tags:
      - category
      description: create Category
      operationId: CategoryController.Post
      parameters:
      - in: body
        name: body
        description: body for Category content
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      responses:
        "201":
          description: '{int} models.Category'
        "403":
          description: body is empty
  /category/{id}:
    get:
      tags:
      - category
      description: get Category by id
      operationId: CategoryController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Category'
        "403":
          description: :id is empty
    put:
      tags:
      - category
      description: update the Category
      operationId: CategoryController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Category content
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Category'
        "403":
          description: :id is not int
    delete:
      tags:
      - category
      description: delete the Category
      operationId: CategoryController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /product/:
    get:
      tags:
      - product
      description: get Product
      operationId: ProductController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Product'
        "403":
          description: ""
    post:
      tags:
      - product
      description: create Product
      operationId: ProductController.Post
      parameters:
      - in: body
        name: body
        description: body for Product content
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      responses:
        "201":
          description: '{int} models.Product'
        "403":
          description: body is empty
  /product/{id}:
    get:
      tags:
      - product
      description: get Product by id
      operationId: ProductController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Product'
        "403":
          description: :id is empty
    put:
      tags:
      - product
      description: update the Product
      operationId: ProductController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Product content
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Product'
        "403":
          description: :id is not int
    delete:
      tags:
      - product
      description: delete the Product
      operationId: ProductController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
definitions:
  models.Category:
    title: Category
    type: object
    properties:
      Detail:
        type: string
      ID:
        type: integer
        format: int64
      Name:
        type: string
  models.Product:
    title: Product
    type: object
    properties:
      Brand:
        type: string
      Category:
        $ref: '#/definitions/models.Category'
      Cost:
        type: number
        format: double
      CreatedAt:
        type: string
        format: datetime
      Detail:
        type: string
      ID:
        type: integer
        format: int64
      Model:
        type: string
      Name:
        type: string
      Price:
        type: number
        format: double
      Quantity:
        type: integer
        format: int64
      UpdatedAt:
        type: string
        format: datetime
tags:
- name: category
  description: |
    CategoryController operations for Category
- name: product
  description: |2
     ProductController operations for Product
