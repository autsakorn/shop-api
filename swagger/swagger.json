{
    "swagger": "2.0",
    "info": {
        "title": "Shop API",
        "description": "documents for Shop API",
        "version": "1.0.0",
        "contact": {}
    },
    "basePath": "/v1",
    "schemes": [
        "http"
    ],
    "paths": {
        "/brand/": {
            "get": {
                "tags": [
                    "brand"
                ],
                "description": "get Brand",
                "operationId": "BrandController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/types.OutputBrand"
                        }
                    },
                    "400": {
                        "description": "{message: \"string\"}"
                    }
                }
            },
            "post": {
                "tags": [
                    "brand"
                ],
                "description": "create Brand",
                "operationId": "BrandController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Brand content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Brand"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} ID"
                    },
                    "400": {
                        "description": "{message: \"string\"}"
                    }
                }
            }
        },
        "/brand/{id}": {
            "get": {
                "tags": [
                    "brand"
                ],
                "description": "get Brand by id",
                "operationId": "BrandController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/types.OutputBrand"
                        }
                    },
                    "400": {
                        "description": "{message: \"string\"}"
                    }
                }
            },
            "put": {
                "tags": [
                    "brand"
                ],
                "description": "update the Brand",
                "operationId": "BrandController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Brand content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.InputUpdateBrand"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "{message: \"string\"}"
                    }
                }
            },
            "delete": {
                "tags": [
                    "brand"
                ],
                "description": "delete the Brand",
                "operationId": "BrandController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "{message: \"string\"}"
                    }
                }
            }
        },
        "/category/": {
            "get": {
                "tags": [
                    "category"
                ],
                "description": "get Category",
                "operationId": "CategoryController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/types.OutputCategory"
                        }
                    },
                    "400": {
                        "description": "{message: \"string\"}"
                    }
                }
            },
            "post": {
                "tags": [
                    "category"
                ],
                "description": "create Category",
                "operationId": "CategoryController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Category content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.InputAddCategory"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int}"
                    },
                    "400": {
                        "description": "{message: \"string\"}"
                    }
                }
            }
        },
        "/category/{id}": {
            "get": {
                "tags": [
                    "category"
                ],
                "description": "get Category by ID",
                "operationId": "CategoryController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/types.OutputCategory"
                        }
                    },
                    "400": {
                        "description": "{message: \"string\"}"
                    }
                }
            },
            "put": {
                "tags": [
                    "category"
                ],
                "description": "update the Category",
                "operationId": "CategoryController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Category content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.InputUpdateCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "\"OK\""
                    },
                    "400": {
                        "description": "{message: \"string\"}"
                    }
                }
            },
            "delete": {
                "tags": [
                    "category"
                ],
                "description": "delete the Category",
                "operationId": "CategoryController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "\"OK\""
                    },
                    "400": {
                        "description": "{message: \"string\"}"
                    }
                }
            }
        },
        "/product/": {
            "get": {
                "tags": [
                    "product"
                ],
                "description": "get Product",
                "operationId": "ProductController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/types.OutputProduct"
                        }
                    },
                    "400": {
                        "description": "{message: \"string\"}"
                    }
                },
                "security": [
                    {
                        "apiKey": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "product"
                ],
                "description": "create Product",
                "operationId": "ProductController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Product content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.InputAddProduct"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int}"
                    },
                    "400": {
                        "description": "{message: \"string\"}"
                    }
                },
                "security": [
                    {
                        "apiKey": []
                    }
                ]
            }
        },
        "/product/{id}": {
            "get": {
                "tags": [
                    "product"
                ],
                "description": "get Product by id",
                "operationId": "ProductController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/types.OutputProduct"
                        }
                    },
                    "400": {
                        "description": "{message: \"string\"}"
                    }
                },
                "security": [
                    {
                        "apiKey": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "product"
                ],
                "description": "update the Product",
                "operationId": "ProductController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Product content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.InputUpdateProduct"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"OK\"}"
                    },
                    "400": {
                        "description": "{message: \"string\"}"
                    }
                },
                "security": [
                    {
                        "apiKey": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "product"
                ],
                "description": "delete the Product",
                "operationId": "ProductController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "\"OK\""
                    },
                    "400": {
                        "description": "{message: \"string\"}"
                    }
                },
                "security": [
                    {
                        "apiKey": []
                    }
                ]
            }
        },
        "/request/": {
            "get": {
                "tags": [
                    "request"
                ],
                "description": "get Request",
                "operationId": "RequestController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "request",
                        "description": "Request corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Request"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                },
                "security": [
                    {
                        "apiKey": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "request"
                ],
                "description": "create Request",
                "operationId": "RequestController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Request content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.InputAddRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} types.OutputRequest"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                },
                "security": [
                    {
                        "apiKey": []
                    }
                ]
            }
        },
        "/request/{id}": {
            "get": {
                "tags": [
                    "request"
                ],
                "description": "get Request by id",
                "operationId": "RequestController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/types.OutputAddRequest"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                },
                "security": [
                    {
                        "apiKey": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "request"
                ],
                "description": "update the Request",
                "operationId": "RequestController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Request content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.InputUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/types.OutputRequest"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                },
                "security": [
                    {
                        "apiKey": []
                    }
                ]
            }
        }
    },
    "definitions": {
        "models.Brand": {
            "title": "Brand",
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string",
                    "format": "datetime"
                },
                "ID": {
                    "type": "integer",
                    "format": "int64"
                },
                "Slug": {
                    "type": "string"
                },
                "Title": {
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "datetime"
                }
            }
        },
        "models.Category": {
            "title": "Category",
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string",
                    "format": "datetime"
                },
                "Detail": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer",
                    "format": "int64"
                },
                "Name": {
                    "type": "string"
                },
                "Status": {
                    "type": "integer",
                    "format": "int32"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "datetime"
                }
            }
        },
        "models.Request": {
            "title": "Request",
            "type": "object",
            "properties": {
                "Brand": {
                    "$ref": "#/definitions/models.Brand"
                },
                "Category": {
                    "$ref": "#/definitions/models.Category"
                },
                "Country": {
                    "type": "string"
                },
                "CreatedAt": {
                    "type": "string",
                    "format": "datetime"
                },
                "Description": {
                    "type": "string"
                },
                "DueDate": {
                    "type": "string",
                    "format": "datetime"
                },
                "ID": {
                    "type": "integer",
                    "format": "int64"
                },
                "Price": {
                    "type": "number",
                    "format": "double"
                },
                "Remark": {
                    "type": "string"
                },
                "RequirePackage": {
                    "type": "string"
                },
                "ShippingAddress": {
                    "type": "string"
                },
                "ShippingMethod": {
                    "type": "string"
                },
                "Title": {
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "datetime"
                }
            }
        },
        "types.InputAddCategory": {
            "title": "InputAddCategory",
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "types.InputAddProduct": {
            "title": "InputAddProduct",
            "type": "object",
            "properties": {
                "Category": {
                    "$ref": "#/definitions/types.productCategory"
                },
                "brand": {
                    "type": "string"
                },
                "cost": {
                    "type": "number",
                    "format": "double"
                },
                "detail": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number",
                    "format": "double"
                },
                "stock": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "types.InputAddRequest": {
            "title": "InputAddRequest",
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string"
                },
                "category": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "dueDate": {
                    "type": "string",
                    "format": "datetime"
                },
                "price": {
                    "type": "number",
                    "format": "double"
                },
                "remark": {
                    "type": "string"
                },
                "requirePackage": {
                    "type": "string"
                },
                "shippingAddress": {
                    "type": "string"
                },
                "shippingMethod": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "types.InputUpdateBrand": {
            "title": "InputUpdateBrand",
            "type": "object",
            "properties": {
                "slug": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "types.InputUpdateCategory": {
            "title": "InputUpdateCategory",
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "types.InputUpdateProduct": {
            "title": "InputUpdateProduct",
            "type": "object",
            "properties": {
                "Category": {
                    "$ref": "#/definitions/types.productCategory"
                },
                "brand": {
                    "type": "string"
                },
                "cost": {
                    "type": "number",
                    "format": "double"
                },
                "detail": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number",
                    "format": "double"
                },
                "stock": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "types.InputUpdateRequest": {
            "title": "InputUpdateRequest",
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string"
                },
                "category": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "dueDate": {
                    "type": "string",
                    "format": "datetime"
                },
                "price": {
                    "type": "number",
                    "format": "double"
                },
                "remark": {
                    "type": "string"
                },
                "requirePackage": {
                    "type": "string"
                },
                "shippingAddress": {
                    "type": "string"
                },
                "shippingMethod": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "types.OutputAddRequest": {
            "title": "OutputAddRequest",
            "type": "object"
        },
        "types.OutputBrand": {
            "title": "OutputBrand",
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "slug": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "types.OutputCategory": {
            "title": "OutputCategory",
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "types.OutputProduct": {
            "title": "OutputProduct",
            "type": "object",
            "properties": {
                "Category": {
                    "$ref": "#/definitions/types.OutputCategory"
                },
                "brand": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "model": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number",
                    "format": "double"
                },
                "stock": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "types.OutputRequest": {
            "title": "OutputRequest",
            "type": "object",
            "properties": {
                "Brand": {
                    "$ref": "#/definitions/types.OutputBrand"
                },
                "Category": {
                    "$ref": "#/definitions/types.OutputCategory"
                },
                "country": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "dueDate": {
                    "type": "string",
                    "format": "datetime"
                },
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "price": {
                    "type": "number",
                    "format": "double"
                },
                "remark": {
                    "type": "string"
                },
                "requirePackage": {
                    "type": "string"
                },
                "shippingAddress": {
                    "type": "string"
                },
                "shippingMethod": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "types.productCategory": {
            "title": "productCategory",
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        }
    },
    "securityDefinitions": {
        "apiKey": {
            "type": "apiKey",
            "description": "APIKey",
            "name": "X-API-KEY",
            "in": "header"
        }
    },
    "tags": [
        {
            "name": "brand",
            "description": "BrandController operations for Brand\n"
        },
        {
            "name": "category",
            "description": "CategoryController operations for Category\n"
        },
        {
            "name": "product",
            "description": "ProductController operations for Product\n"
        },
        {
            "name": "request",
            "description": "RequestController operations for Request\n"
        },
        {
            "name": "error",
            "description": "ErrorController handle abort error\n"
        }
    ]
}